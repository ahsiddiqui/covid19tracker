{"version":3,"sources":["logo.svg","InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js","adil.png"],"names":["module","exports","InfoBox","title","subtitle","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","numeral","format","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","src","myphoto","alt","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20770121.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nimport numeral from \"numeral\"; \r\n\r\nfunction InfoBox({ title, subtitle, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card \r\n            onClick={props.onClick} \r\n            className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{numeral(cases).format(\"0,0\")}</h2>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{subtitle}</Typography>\r\n                {/* <Typography className=\"infoBox__total\" color=\"textSecondary\">{total}</Typography> */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{numeral(total).format(\"0,0\")}</h2>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\"; // to format numbers in a certain way\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => \r\nstat ? `${numeral(stat).format(\"0\")}` : \"+0\";\r\n\r\n\r\n// Draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = 'cases') => \r\n    data.map((country) => (\r\n        <Circle \r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options ={\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n}\r\nfunction LineGraph({ casesType, ...props }) {\r\n    const [data, setData] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n        };\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: (casesType === \"recovered\" ?\r\n                                \"greenyellow\" : \"rgba(204, 16, 52, 0.5)\"),\r\n                                borderColor: (casesType === \"recovered\" ? \r\n                                \"green\" : \"#CC1034\"),\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport logo from './logo.svg';\nimport './App.css';\nimport myphoto from './adil.png';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // https://disease.sh/v3/covid-19/countries\n  // useEffect runs a piece of code based on a given condition\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, [])\n  useEffect(() => {\n    // this code runs only once when the component loads\n    // or if the data in a variable inside here changes\n    // async -> send request, wait for info, then do something with that info\n      const getCountriesData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n          .then((response) => response.json())\n          .then((data) => {\n            const countries = data.map((country) => ({\n              name: country.country, // United States, United Kingdom, etc.\n              value: country.countryInfo.iso2 // USA, UK, etc\n            }));\n            const sortedData = sortData(data);\n            setTableData(sortedData);\n            setMapCountries(data);\n            setCountries(countries);\n          });\n      };\n      getCountriesData()\n  }, []);\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if(countryCode === 'worldwide'){\n          setMapCenter(mapCenter);\n          setMapZoom(mapZoom);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        };\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <div className=\"app__TitleCenter\">\n          <img src={myphoto} alt=\"Adil Siddiqui\" className=\"my__img\"/>\n          <h3>Adil Siddiqui</h3>\n          </div>\n          <div className=\"app__TitleCenter\">\n          <h1>COVID-19 Tracker</h1>\n          <p className=\"app__SubTitleCenter\">(Inspired By Clever Programmer)</p>\n          </div>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType('cases')}\n            title=\"New cases Today\"\n            cases={(countryInfo.todayCases)}\n            subtitle=\"Total cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType('recovered')}\n            title=\"Recovered cases Today\"\n            cases={(countryInfo.todayRecovered)}\n            subtitle=\"Total recovery\"\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType('deaths')}\n            title=\"Deaths cases Today\"\n            cases={(countryInfo.todayDeaths)}\n            subtitle=\"Total deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        {<Map \n          casesType={casesType}\n          countries={mapCountries} \n          center={mapCenter} \n          zoom={mapZoom} \n        /> }\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n        <h3 className=\"app__rightGraphTitle\">New Daily {casesType} Worldwide (till yesterday)</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n          <hr></hr><br></br>         \n          <h3 className=\"app__rightTableTitle\">Total Cases by Country</h3>\n          <Table countries={tableData} />\n        </CardContent>   \n      </Card>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/adil.b9156d98.png\";"],"sourceRoot":""}